global
<% if @load_balancer.cpus > 1 %>
  nbproc 1
  nbthread <%= @load_balancer.cpus %>
  cpu-map auto:1/1-<%= @load_balancer.cpus %> 0-<%= @load_balancer.cpus - 1 %>
<% end %>
  log /dev/log local0 notice alert
  log /dev/log local1 notice alert
  chroot /var/lib/haproxy
  user haproxy
  group haproxy
  daemon
  maxconn <%= @load_balancer.maxconn %>
  tune.ssl.cachesize <%= @load_balancer.ssl_cache %>

  ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
  ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

  ssl-default-server-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
  ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

  ssl-dh-param-file /etc/haproxy/dhparam.pem

defaults
  balance roundrobin
  log global
  timeout connect <%= @load_balancer.g_timeout_connect %>
  timeout client <%= @load_balancer.g_timeout_client %>
  timeout server <%= @load_balancer.g_timeout_server %>
  errorfile 400 /etc/haproxy/errors/400.http
  errorfile 403 /etc/haproxy/errors/403.http
  errorfile 408 /etc/haproxy/errors/408.http
  errorfile 500 /etc/haproxy/errors/500.http
  errorfile 502 /etc/haproxy/errors/502.http
  errorfile 503 /etc/haproxy/default.http
  errorfile 504 /etc/haproxy/errors/504.http

<%= render partial: 'api/stacks/load_balancers/haproxy/frontend-http', locals: { load_balancer: @load_balancer } %>
<%= render partial: 'api/stacks/load_balancers/haproxy/frontend-tcp', locals: { load_balancer: @load_balancer } %>
<%= render partial: 'api/stacks/load_balancers/haproxy/stats', locals: { load_balancer: @load_balancer } %>
backend letsencrypt
  mode http
  server acme <%= Setting.le_server %>

<%= render partial: 'api/stacks/load_balancers/haproxy/backend-http', locals: { load_balancer: @load_balancer, node: @node } %>
<%= render partial: 'api/stacks/load_balancers/haproxy/backend-tcp', locals: { load_balancer: @load_balancer, node: @node } %>

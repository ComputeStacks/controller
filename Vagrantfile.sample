# -*- mode: ruby -*-
# vi: set ft=ruby :

##
# ComputeStacks Vagrantfile
#
# 1. Copy `envrc.sample` to `.envrc` and update values appropriately.
# 2. Copy `Vagrantfile.sample` to `Vagrantfile` and update settings to match your environment. This could include using a different provider than the default Virtualbox.
# 3. Bring up with `vagrant up`. This will take a few minutes depending on your computer -- compiling ruby takes a bit.
# 4. Once up, enter the VM with `vagrant ssh` and `cd ~/controller` and run:
#     a. `direnv allow .`
#     b. `bundle` -- if you did not setup your `.envrc` correctly, you will get an authorization error. Our provision script will automatically take the credentials in your `.envrc` file and authenticate with Github, but please also reference this document if you run into issues: https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-rubygems-registry
#
# 5. Once all the gems have been installed, bootstrap your database with:
#     a. `bundle exec rails db:create`
#     b. `bundle exec rails db:schema:load`
#     c. `bundle exec rails db:seed`
#
# 6. (optional) Run our test suite with: `bundle exec rails test`
#
# You may now launch ComputeStacks by running `overmind s` from the ~/controller directory within the vagrant vm.
#
# Next, proceed to your browser and visit http://localhost:3005 -- the default credentials are `admin@cstacks.local` / `changeme!`
#
Vagrant.configure("2") do |config|

  config.vm.synced_folder ".", "/home/vagrant/controller"

  # ComputeStacks Web UI: http://localhost:3005
  config.vm.network "forwarded_port", guest: 3005, host: 3005, auto_correct: true

  # Prometheus: http://localhost:9090
  config.vm.network "forwarded_port", guest: 9090, host: 9090, auto_correct: true

  config.vm.box = "roboxes/debian11"
  #  config.vm.provider "parallels" do |vm|
  #    vm.name = "computestacks"
  #    vm.memory = 4096
  #    vm.cpus = 2
  #    vm.customize ["set", :id, "--hypervisor-type", "apple"]
  #    vm.check_guest_tools = true
  #    vm.update_guest_tools = true
  #  end

  config.vm.provision "file", source: "lib/test/powerdns/pdns_up.sh", destination: "/tmp/cs_pdns_up"
  config.vm.provision "shell", path: "lib/dev/vagrant_provision.sh"

  config.trigger.after :up do |trigger|
    trigger.name = "Setup IPTables"
    trigger.run_remote = {
      inline: "iptables -t nat -N expose-ports && iptables -t nat -A OUTPUT -j expose-ports && iptables -t nat -A PREROUTING -j expose-ports"
    }
  end

end
